FROM debian:latest as base_runtime
ENV LANG=C.UTF-8
# Setup some things in anticipation of virtualenvs
ENV VIRTUAL_ENV=/opt/venv
# The following ensures that the venv takes precedence if available
ENV PATH=${VIRTUAL_ENV}/bin:$PATH
# The following ensures that system packages are visible to venv Python, and vice versa
ENV PYTHONPATH=/usr/lib/python3.7/site-packages:${VIRTUAL_ENV}/lib/python3.7/site-packages
# install runtime requirements
RUN apt-get update -qq \
&&  DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends \
        bash-completion \
        python3-minimal \
        python3-virtualenv \
        python3-pip \
        libopenblas-base
RUN pip3 install -U setuptools  \
&&  pip3 install --no-cache-dir \
        packaging \
        appdirs \
        numpy \
        jupyter \
        jupytext \
        ipyparallel \
        sympy

FROM base_runtime AS build_base
# install build requirements
RUN apt-get update -qq 
RUN DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends \
        build-essential \
        cmake \
        wget \
        gfortran \
        python3-dev \
        libopenblas-dev \
        libz-dev \ 
        less \ 
        vim \
        valgrind valgrind-dbg valgrind-mpi
# build mpi
WORKDIR /tmp/mpich-build
ARG MPICH_VERSION="3.1.4"
RUN wget http://www.mpich.org/static/downloads/${MPICH_VERSION}/mpich-${MPICH_VERSION}.tar.gz 
RUN  tar xvzf mpich-${MPICH_VERSION}.tar.gz 
WORKDIR /tmp/mpich-build/mpich-${MPICH_VERSION}
ARG MPICH_CONFIGURE_OPTIONS="--prefix=/usr/local --enable-g=option=all --disable-fast"
# ARG MPICH_CONFIGURE_OPTIONS="--prefix=/usr/local --enable-g=option=none --disable-debuginfo --enable-fast=O3,ndebug --without-timing --without-mpit-pvars"
ARG MPICH_MAKE_OPTIONS="-j8"
RUN ./configure ${MPICH_CONFIGURE_OPTIONS} 
RUN make ${MPICH_MAKE_OPTIONS}             
RUN make install                           
RUN ldconfig
# create venv now for forthcoming python packages
RUN /usr/bin/python3 -m virtualenv --python=/usr/bin/python3 ${VIRTUAL_ENV} 
RUN pip3 install --no-cache-dir mpi4py
# build petsc
WORKDIR /tmp/petsc-build

#ENV PETSC_BRANCH=v3.12
RUN DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends git
RUN git clone https://gitlab.com/petsc/petsc/
WORKDIR /tmp/petsc-build/petsc
RUN python3 ./configure --with-debugging=1 --prefix=/usr/local \
                --with-zlib=1                   \
                --download-mumps=1              \
                --download-parmetis=1           \
                --download-metis=1              \
                --download-scalapack=1          \
                --useThreads=0                  \
                --with-shared-libraries         \
                --with-cxx-dialect=C++11        \
                --download-hdf5=https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.10/hdf5-1.10.6/src/hdf5-1.10.6.tar.gz               \
                --with-make-np=8                \
                --download-ctetgen              \
                --download-eigen                \
                --download-triangle        
RUN make PETSC_DIR=/tmp/petsc-build/petsc PETSC_ARCH=arch-linux-c-debug all
RUN make PETSC_DIR=/tmp/petsc-build/petsc PETSC_ARCH=arch-linux-c-debug install
ENV PETSC_DIR=/usr/local
ENV PETSC_ARCH=arch-linux-c-debug
RUN pip3 install cython
RUN pip3 install --no-cache-dir git+https://bitbucket.org/petsc/petsc4py/src/master
RUN CC=h5pcc HDF5_MPI="ON" HDF5_DIR=${PETSC_DIR} pip3 install --no-cache-dir --no-binary=h5py git+https://github.com/h5py/h5py
ENV LD_LIBRARY_PATH=/usr/local/lib

# add uw
COPY . /tmp/uw3
WORKDIR /tmp/uw3
RUN pip3 install .